Copyright (c) 2015, Dan Ros√©n
Copyright (c) 2016, Nick Smallbone

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of the copyright holder nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The Language TIP
BNF Converter


%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of TIP==

===Literals===
Integer literals //Integer// are nonempty sequences of digits.






UnquotedSymbol literals are recognized by the regular expression
`````(["!$%&*+./<=>?@^_~"] | letter) (["!$%&*+-./<=>?@^_~"] | digit | letter)*`````

QuotedSymbol literals are recognized by the regular expression
`````'|' (char - '|' | '\' char)* '|'`````

Keyword literals are recognized by the regular expression
`````':' ('-' | digit | letter)*`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in TIP are the following:
  | ``Bool`` | ``Int`` | ``Real`` | ``and``
  | ``assert`` | ``distinct`` | ``div`` | ``exists``
  | ``false`` | ``forall`` | ``ite`` | ``lambda``
  | ``let`` | ``match`` | ``mod`` | ``not``
  | ``or`` | ``par`` | ``prove`` | ``to_real``
  | ``true`` |  |  |

The symbols used in TIP are the following:
  | ( | ) | declare-datatype | declare-datatypes
  | declare-sort | declare-const | declare-fun | define-fun
  | define-fun-rec | define-funs-rec | => | -
  | _ | @ | = | +
  | * | / | > | >=
  | < | <= |  |

===Comments===
Single-line comments begin with ;.There are no multiple-line comments in the grammar.

==The syntactic structure of TIP==
Non-terminals are enclosed between < and >.
The symbols -> (production),  **|**  (union)
and **eps** (empty rule) belong to the BNF notation.
All other symbols are terminals.

  | //Start// | -> | //[Decl]//
  | //[Decl]// | -> | **eps**
  |  |  **|**  | ``(`` //Decl// ``)`` //[Decl]//
  | //Decl// | -> | ``declare-datatype`` //AttrSymbol// //Datatype//
  |  |  **|**  | ``declare-datatypes`` ``(`` //[DatatypeName]// ``)`` ``(`` //[Datatype]// ``)``
  |  |  **|**  | ``declare-sort`` //AttrSymbol// //Integer//
  |  |  **|**  | ``declare-const`` //AttrSymbol// //ConstType//
  |  |  **|**  | ``declare-fun`` //AttrSymbol// //FunType//
  |  |  **|**  | ``define-fun`` //FunDec// //Expr//
  |  |  **|**  | ``define-fun-rec`` //FunDec// //Expr//
  |  |  **|**  | ``define-funs-rec`` ``(`` //[BracketedFunDec]// ``)`` ``(`` //[Expr]// ``)``
  |  |  **|**  | //Assertion// //[Attr]// //Expr//
  |  |  **|**  | //Assertion// //[Attr]// ``(`` //Par// //Expr// ``)``
  | //Assertion// | -> | ``assert``
  |  |  **|**  | ``prove``
  | //Par// | -> | ``par`` ``(`` //[Symbol]// ``)``
  | //ConstType// | -> | //Type//
  |  |  **|**  | ``(`` //Par// //Type// ``)``
  | //InnerFunType// | -> | ``(`` //[Type]// ``)`` //Type//
  | //FunType// | -> | //InnerFunType//
  |  |  **|**  | ``(`` //Par// ``(`` //InnerFunType// ``)`` ``)``
  | //InnerFunDec// | -> | ``(`` //[Binding]// ``)`` //Type//
  | //FunDec// | -> | //AttrSymbol// //InnerFunDec//
  |  |  **|**  | //AttrSymbol// ``(`` //Par// ``(`` //InnerFunDec// ``)`` ``)``
  | //BracketedFunDec// | -> | ``(`` //FunDec// ``)``
  | //DatatypeName// | -> | ``(`` //AttrSymbol// //Integer// ``)``
  | //InnerDatatype// | -> | ``(`` //[Constructor]// ``)``
  | //Datatype// | -> | //InnerDatatype//
  |  |  **|**  | ``(`` //Par// //InnerDatatype// ``)``
  | //Constructor// | -> | ``(`` //AttrSymbol// //[Binding]// ``)``
  | //Binding// | -> | ``(`` //Symbol// //Type// ``)``
  | //LetDecl// | -> | ``(`` //Symbol// //Expr// ``)``
  | //Type// | -> | //Symbol//
  |  |  **|**  | ``(`` //Symbol// //[Type]// ``)``
  |  |  **|**  | ``(`` ``=>`` //[Type]// ``)``
  |  |  **|**  | ``Int``
  |  |  **|**  | ``Real``
  |  |  **|**  | ``Bool``
  | //Expr// | -> | //PolySymbol//
  |  |  **|**  | ``(`` //Head// //[Expr]// ``)``
  |  |  **|**  | ``(`` ``match`` //Expr// ``(`` //[Case]// ``)`` ``)``
  |  |  **|**  | ``(`` ``let`` ``(`` //[LetDecl]// ``)`` //Expr// ``)``
  |  |  **|**  | ``(`` //Binder// ``(`` //[Binding]// ``)`` //Expr// ``)``
  |  |  **|**  | //Lit//
  | //Lit// | -> | //Integer//
  |  |  **|**  | ``-`` //Integer//
  |  |  **|**  | ``true``
  |  |  **|**  | ``false``
  | //Binder// | -> | ``lambda``
  |  |  **|**  | ``forall``
  |  |  **|**  | ``exists``
  | //Case// | -> | ``(`` //Pattern// //Expr// ``)``
  | //Pattern// | -> | ``_``
  |  |  **|**  | ``(`` //Symbol// //[Symbol]// ``)``
  |  |  **|**  | //Symbol//
  |  |  **|**  | //Lit//
  | //Head// | -> | //PolySymbol//
  |  |  **|**  | ``@``
  |  |  **|**  | ``ite``
  |  |  **|**  | ``and``
  |  |  **|**  | ``or``
  |  |  **|**  | ``not``
  |  |  **|**  | ``=>``
  |  |  **|**  | ``=``
  |  |  **|**  | ``distinct``
  |  |  **|**  | ``+``
  |  |  **|**  | ``-``
  |  |  **|**  | ``*``
  |  |  **|**  | ``/``
  |  |  **|**  | ``div``
  |  |  **|**  | ``mod``
  |  |  **|**  | ``>``
  |  |  **|**  | ``>=``
  |  |  **|**  | ``<``
  |  |  **|**  | ``<=``
  |  |  **|**  | ``to_real``
  | //PolySymbol// | -> | //Symbol//
  |  |  **|**  | ``(`` ``_`` //Symbol// //[Type]// ``)``
  | //AttrSymbol// | -> | //Symbol// //[Attr]//
  | //Attr// | -> | //Keyword//
  |  |  **|**  | //Keyword// //Symbol//
  | //[LetDecl]// | -> | **eps**
  |  |  **|**  | //LetDecl// //[LetDecl]//
  | //[Case]// | -> | **eps**
  |  |  **|**  | //Case// //[Case]//
  | //[Expr]// | -> | **eps**
  |  |  **|**  | //Expr// //[Expr]//
  | //[Datatype]// | -> | **eps**
  |  |  **|**  | //Datatype// //[Datatype]//
  | //[Constructor]// | -> | **eps**
  |  |  **|**  | //Constructor// //[Constructor]//
  | //[Binding]// | -> | **eps**
  |  |  **|**  | //Binding// //[Binding]//
  | //[Symbol]// | -> | **eps**
  |  |  **|**  | //Symbol// //[Symbol]//
  | //[Type]// | -> | **eps**
  |  |  **|**  | //Type// //[Type]//
  | //[FunDec]// | -> | **eps**
  |  |  **|**  | //FunDec// //[FunDec]//
  | //[BracketedFunDec]// | -> | **eps**
  |  |  **|**  | //BracketedFunDec// //[BracketedFunDec]//
  | //[Attr]// | -> | **eps**
  |  |  **|**  | //Attr// //[Attr]//
  | //[DatatypeName]// | -> | **eps**
  |  |  **|**  | //DatatypeName// //[DatatypeName]//
  | //Symbol// | -> | //UnquotedSymbol//
  |  |  **|**  | //QuotedSymbol//



%% File generated by the BNF Converter (bnfc 2.9.4).
