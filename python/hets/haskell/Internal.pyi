""" Auto generated python stubs for haskell module ../HetsAPI/Internal.hs"""

import typing
from .Prelude import *

a = typing.TypeVar("a")

class DGNodeLab:
    def getNodeConsStatus(self) -> ConsStatus: ...

    ...


class DGLinkLab:
    ...


class ConsStatus:
    def isProvenConsStatusLink(self) -> bool: ...

    def requiredConservativity(self) -> Conservativity: ...

    def provenConservativity(self) -> Conservativity: ...

    ...

class Conservativity: ...
class DGraph: ...

class GlobalAnnos: ...


def developmentGraphNodeLabelName(x0: DGNodeLab) -> str: ...


def developmentGraphEdgeLabelName(x0: DGLinkLab) -> str: ...


def globalAnnotations(x0: DGraph) -> GlobalAnnos: ...


def precedenceAnnotations(x0: GlobalAnnos) -> object: ...


def associativityAnnotations(x0: GlobalAnnos) -> object: ...


def displayAnnos(x0: GlobalAnnos) -> object: ...


def literalAnnos(x0: GlobalAnnos) -> object: ...


def prefixMap(x0: GlobalAnnos) -> object: ...


class Result(typing.Generic[a]):
    def diags(self) -> typing.List[typing.Any]: ...


def resultToMaybe(r: Result[a]) -> Maybe[a]: ...



class GoalStatus: ...


class TimeOfDay: ...


class TacticScript: ...

class ConsistencyStatus: ...


class LibName: ...


class LibEnv: ...

class ProofStatus(typing.Generic[a]):
    def goalName(self) -> str: ...

    def goalStatus(self) -> GoalStatus: ...

    def usedAxioms(self) -> typing.List[str]: ...

    def usedProver(self) -> str: ...

    def proofTree(self) -> a: ...

    def usedTime(self) -> TimeOfDay: ...

    def tacticScript(self) -> TacticScript: ...

    def proofLines(self) -> typing.List[str]: ...


class ExtSign(typing.Generic[a, b]):
    def plainSign(self): ...

    def nonImportedSymbols(self): ...

def showConsistencyStatus(c: Conservativity) -> str: ...

def fromJust(m: Maybe[a]) -> a: ...

class ProofState: ...

class Diagnosis: ...


def getLNodesFromDevelopmentGraph(g: DGraph) -> typing.List[typing.Tuple[int, DGNodeLab]]: ...


def getEdgesFromDevelopmentGraph(g: DGraph) -> typing.List[DGLinkLab]: ...


def getLEdgesFromDevelopmentGraph(g: DGraph) -> typing.List[typing.Tuple[int, int, DGLinkLab]]: ...

class HetcatsOpts: ...

def defaultHetcatsOpts() -> HetcatsOpts: ...
